"""
Mempool Mirror ‚Äî –∏—â–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ mempool —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –≤—Ö–æ–¥–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–º–µ–Ω–∞/–∞—Ç–∞–∫–∞ RBF).
"""

import requests
import time

MEMPOOL_URL = "https://mempool.space/api/mempool/recent"

def fetch_recent_txs():
    r = requests.get(MEMPOOL_URL)
    r.raise_for_status()
    return r.json()

def fetch_tx(txid):
    r = requests.get(f"https://mempool.space/api/tx/{txid}")
    r.raise_for_status()
    return r.json()

def extract_inputs(tx):
    return {(vin["txid"], vin["vout"]) for vin in tx.get("vin", [])}

def main():
    print("ü™û Mempool Mirror –∑–∞–ø—É—â–µ–Ω. –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 25 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

    seen_inputs = {}
    duplicates = []

    try:
        recent = fetch_recent_txs()
        for tx_meta in recent:
            txid = tx_meta["txid"]
            tx = fetch_tx(txid)
            tx_inputs = extract_inputs(tx)

            for input_ref in tx_inputs:
                if input_ref in seen_inputs:
                    print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—Ö–æ–¥–æ–≤! {input_ref}")
                    print(f" - –°—Ç–∞—Ä—ã–π tx: {seen_inputs[input_ref]}")
                    print(f" - –ù–æ–≤—ã–π tx: {txid}")
                    duplicates.append((seen_inputs[input_ref], txid))
                else:
                    seen_inputs[input_ref] = txid

        if not duplicates:
            print("‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
